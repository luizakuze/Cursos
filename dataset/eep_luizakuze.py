# -*- coding: utf-8 -*-
"""eep-luizakuze.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m3X2Wz5Cy2SI1OI_582Tm_nB3Ez-BygZ

# Estudo do tempo de corrida em minutos por km (pace) 📚🏃

> Análise a partir da Maratona de Boston 2023
"""

#@title Importando bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
import matplotlib.patches as patches
import seaborn as sns
plt.style.use('ggplot')

#@title Leitura do arquivo

uri = "./boston_marathon_2023.csv"
maratona = pd.read_csv(uri)

"""## Análise da Estrutura do Dataset 📖"""

#@title Verificando duplicações

maratona.duplicated().any()

#@title Renomeando colunas

maratona.columns = ["divisao_faixa", "posicao_geral", "posicao_genero", "posicao_faixa", "nome", "equipe", "numero_peito", "tempo_meia_maratona", "tempo_liquido_maratona", "tempo_bruto_maratona", "genero", "tempo_meia_maratona_segundos", "tempo_liquido_maratona_segundos", "tempo_bruto_maratona_segundos", "tempo_liquido_maratona_minutos"]
maratona.head()

#@title Adicionando o 'Pace' à tabela

maratona['pace'] = maratona['tempo_liquido_maratona_minutos'] / 42
maratona.head()

#@title Visualização geral

maratona.info()

"""## Análise do Pace e Gênero 📊

> ### Motivação
- Como o pace difere entre homens e mulheres?
- A densidade do pace é semelhante para ambos os gêneros?
- Como o pace médio varia em diferentes faixas etárias para homens e mulheres?
- Qual é a distribuição percentual de homens e mulheres na maratona?
"""

#@title Selecionando corredores por gênero

homens = maratona[maratona['genero'] == 'M']
mulheres = maratona[maratona['genero'] == 'W']

#@title Média do pace
maratona['pace'].mean()

# Configuração inicial
plt.figure(figsize=(10, 6))
sns.set(style="whitegrid")

# Gráfico de densidade do pace
sns.kdeplot(maratona['pace'], color='skyblue', fill=True)

# Linha vertical para representar a média
mean_pace = maratona['pace'].mean()
plt.axvline(mean_pace, color='red', linestyle='dashed', linewidth=2, label='Média Geral')

# Linha vertical para representar a média + desvio padrão
std_dev_pace = maratona['pace'].std()
plt.axvline(mean_pace + std_dev_pace, color='green', linestyle='dashed', linewidth=2, label='Média + Desvio Padrão')

# Linha vertical para representar a média - desvio padrão
plt.axvline(mean_pace - std_dev_pace, color='blue', linestyle='dashed', linewidth=2, label='Média - Desvio Padrão')

# Adicionar título e rótulos dos eixos
plt.title('Gráfico de Densidade do Pace com Linhas Verticais')
plt.xlabel('Pace')
plt.ylabel('Densidade')

# Adicionar legenda
plt.legend()

# Exibir o gráfico
plt.show()

# Configuração inicial
plt.figure(figsize=(10, 6))
sns.set(style="whitegrid")

# Gráfico de densidade do pace
sns.kdeplot(maratona['pace'], color='skyblue', fill=True)

# Linha vertical para representar a média geral
mean_pace = maratona['pace'].mean()
plt.axvline(mean_pace, color='red', linestyle='dashed', linewidth=2, label='Média Geral')

# Linha vertical para representar a média + desvio padrão
std_dev_pace = maratona['pace'].std()
plt.axvline(mean_pace + std_dev_pace, color='green', linestyle='dashed', linewidth=2, label='Média + Desvio Padrão')

# Linha vertical para representar a média - desvio padrão
plt.axvline(mean_pace - std_dev_pace, color='blue', linestyle='dashed', linewidth=2, label='Média - Desvio Padrão')

# Calcular média do pace para homens
mean_pace_homens = maratona[maratona['genero'] == 'M']['pace'].mean()
plt.axvline(mean_pace_homens, color='orange', linestyle='dashed', linewidth=2, label='Média Homens')

# Calcular média do pace para mulheres
mean_pace_mulheres = maratona[maratona['genero'] == 'W']['pace'].mean()
plt.axvline(mean_pace_mulheres, color='purple', linestyle='dashed', linewidth=2, label='Média Mulheres')

# Adicionar título e rótulos dos eixos
plt.title('Gráfico de Densidade do Pace com Linhas Verticais')
plt.xlabel('Pace')
plt.ylabel('Densidade')

# Adicionar legenda
plt.legend()

# Exibir o gráfico
plt.show()

#@title Dados do pace

## para todos
p_geral = maratona['pace'].describe()

## para homens
p_homens = homens['pace'].describe()

## para mulheres
p_mulheres = mulheres['pace'].describe()

print('Para todos\n', p_geral)
print('Para homens\n', p_homens)
print('Para mulheres\n', p_mulheres)

#@title Média do pace por faixa etária

## para todos
mpf_todos = maratona.groupby('divisao_faixa')['pace'].mean().reset_index()

## para homens
mpf_homens = homens.groupby('divisao_faixa')['pace'].mean().reset_index()

## para mulheres
mpf_mulheres = mulheres.groupby('divisao_faixa')['pace'].mean().reset_index()

print('Para todos\n', mpf_todos)
print('Para homens\n', mpf_homens)
print('Para mulheres\n', mpf_mulheres)

#@title Desvio padrão do pace geral

maratona['pace'].std

#@title Frequência de Gêneros
df = maratona['genero'].value_counts()

# Plotar gráfico de pizza
df.plot(kind='pie', autopct='%1.1f%%', labels=['Masculino','Feminino'],  startangle=90, figsize=(5, 5), colors=['skyblue', 'lightcoral'], wedgeprops=dict(width=0.3))

plt.title("Frequência de Gêneros")
plt.ylabel("")  # remove o rótulo do eixo y
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Configurações adicionais para melhorar a visualização
plt.figure(figsize=(7, 4))
sns.set(style="whitegrid")

# Gráfico de densidade do Pace para homens
sns.kdeplot(homens['pace'], shade=True, color='skyblue', label='Homens')

# Gráfico de densidade do Pace para mulheres
sns.kdeplot(mulheres['pace'], shade=True, color='lightcoral', label='Mulheres')

sns.kdeplot(maratona['pace'], shade=True, color='plum', label='Geral')


# Adiciona linhas verticais para representar as médias
plt.axvline(maratona['pace'].mean(), color='plum', linestyle='dashed', linewidth=2, label='Média Geral')
plt.axvline(homens['pace'].mean(), color='skyblue', linestyle='dashed', linewidth=2, label='Média Homens')
plt.axvline(mulheres['pace'].mean(), color='lightcoral', linestyle='dashed', linewidth=2, label='Média Mulheres')

plt.title('Distribuição de Densidade do Pace por Gênero')
plt.xlabel('Pace')
plt.ylabel('Densidade')

# Adiciona uma legenda
plt.legend()

# Exibe o gráfico
plt.show()

#@title Pace médio por faixa etária e gênero

##  Criar a figura e o eixo
fig, ax = plt.subplots(figsize=(10, 5), facecolor='white', dpi=80)

# Adicionar as barras verticais representando a média de pace para mulheres e homens
ax.vlines(x=mpf_mulheres.index, ymin=0, ymax=mpf_mulheres['pace'], color='lightcoral', alpha=1, linewidth=20, label='Mulheres')
ax.vlines(x=mpf_homens.index, ymin=0, ymax=mpf_homens['pace'], color='skyblue', alpha=0.7, linewidth=20, label='Homens')

plt.xticks(mpf_homens.index, mpf_homens['divisao_faixa'], rotation=60, horizontalalignment='right', fontsize=12)

ax.set(ylabel='Pace', ylim=(0, 10))
ax.set(xlabel='Divisão Faixa (índices)')

plt.legend()
plt.title('Pace médio por faixa etária e gênero')
plt.show()

"""## Análise Pace e Equipes de corrida 👩🏻‍🤝‍👩🏻

> ## Motivação
- Qual a equipe mais veloz?
- Ter uma equipe te torna mais veloz?
"""

#@title Dividindo a população em 2 amostras

sem_equipe = maratona[maratona['equipe'] == 'Team–'].reset_index()
com_equipe = maratona[maratona['equipe'] != 'Team–'].reset_index()

#@title 1ª Amostra - Corredores com equipe
com_equipe.head(3)

#@title 2ª Amostra - Corredores sem equipe
sem_equipe.head(3)

#@title Número de equipes
num_equipes = com_equipe['equipe'].nunique()
print('Número de equipes', num_equipes)

#@title Número de corredores com e sem equipe

## com equipe
nc_com_equipe = com_equipe['nome'].nunique()

## sem equipe
nc_sem_equipe = sem_equipe['nome'].nunique()

print(f'Número de corredores\nCom equipe: {nc_com_equipe}\nSem equipe: {nc_sem_equipe}')

#@title Pace médio corredores com e sem equipe
## densidade é o a frequência relativa dividida pela amplitude da classe
mp_com_equipe = com_equipe['pace'].mean()
mp_sem_equipe = sem_equipe['pace'].mean()

print(f'Pace médio\nCom equipe: {mp_com_equipe}\nSem equipe: {mp_sem_equipe}')

#@title Histograma de paces com e sem equipe

# Histograma de paces com e sem equipe
plt.figure(figsize=(8, 5))

# Normalizar os histogramas
sns.histplot(com_equipe['pace'], color='plum', alpha=0.75, label='Com Equipe', kde=True, stat='density')
sns.histplot(sem_equipe['pace'], color='aquamarine', alpha=0.75, label='Sem Equipe', kde=True, stat='density')

plt.xlabel('Pace')
plt.ylabel('Densidade')
plt.title("Pace de corredores com e sem equipe")
plt.legend()
plt.show()

#@title Frequência de corredores com e sem equipe


df_frequencia = pd.DataFrame({'Frequência': [nc_sem_equipe, nc_com_equipe]},
                             index=['Sem Equipe', 'Com Equipe'])

df_frequencia['Frequência'].plot(kind='pie', autopct='%1.1f%%', startangle=90, figsize=(5, 5),
                                labels=df_frequencia.index, colors=['plum', 'aquamarine'], wedgeprops=dict(width=0.3))

plt.title("Frequência de Corredores Com e Sem Equipe")
plt.ylabel("")
plt.show()

#@title Média do pace por equipe
mp_equipes = maratona.groupby('equipe')['pace'].mean().reset_index()
print(mp_equipes)

#@title Equipe com maior e menor pace

com_equipe.describe()

#@title Pace médio por faixa etária com/sem equipe
fig, ax = plt.subplots(figsize=(10, 5), facecolor='white', dpi=80)

ax.bar(mp_sem_equipe.index, mp_sem_equipe, color='aquamarine', alpha=0.7, label='Sem Equipe')
ax.bar(mp_com_equipe.index, mp_com_equipe, color='plum', alpha=0.7, label='Com Equipe')

plt.title('Pace Médio por Faixa Etária e Com/Sem Equipe')
plt.xlabel('Faixa Etária')
plt.ylabel('Pace Médio')
plt.legend()
plt.show()

#@title Equipe mais veloz
com_equipe.min()

#@title Equipes com maior número de corredores

com_equipe['equipe'].value_counts().head()

"""##Conclusão ✨"""

#@title Relação pace, gênero e equipes

#Filtrar os dados para homens com e sem equipe
homens_com_equipe = maratona[(maratona['equipe'] != 'Team–') & (maratona['genero'] == 'M')].reset_index()
homens_sem_equipe = maratona[(maratona['equipe'] == 'Team–') & (maratona['genero'] == 'M')].reset_index()

# Filtrar os dados para mulheres com e sem equipe
mulheres_com_equipe = maratona[(maratona['equipe'] != 'Team–') & (maratona['genero'] == 'W')].reset_index()
mulheres_sem_equipe = maratona[(maratona['equipe'] == 'Team–') & (maratona['genero'] == 'W')].reset_index()

# Calcular o pace médio para cada categoria
mp_homens_com_equipe = homens_com_equipe['pace'].mean()
mp_homens_sem_equipe = homens_sem_equipe['pace'].mean()
mp_mulheres_com_equipe = mulheres_com_equipe['pace'].mean()
mp_mulheres_sem_equipe = mulheres_sem_equipe['pace'].mean()

# Criar um DataFrame com os resultados
dados_pace = pd.DataFrame({
    'Categoria': ['Homem com Equipe', 'Homem sem Equipe', 'Mulher com Equipe', 'Mulher sem Equipe'],
    'Pace Médio': [mp_homens_com_equipe, mp_homens_sem_equipe, mp_mulheres_com_equipe, mp_mulheres_sem_equipe]
})

# Configuração inicial
plt.figure(figsize=(10, 6))
sns.set(style="whitegrid")

# Gráfico de barras
sns.barplot(x='Pace Médio', y='Categoria', data=dados_pace, palette='pastel')

# Adicionar título e rótulos dos eixos
plt.title('Pace Médio por Categoria')
plt.xlabel('Pace Médio')
plt.ylabel('Categoria')

# Exibir o gráfico
plt.show()